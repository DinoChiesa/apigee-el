<OAuthV2 name='##'>
    <!-- created at ${1:$$(format-time-string \"%Y-%m-%dT%T%z\" (current-time) t)} -->
    <Operation>GenerateAccessToken</Operation>
    <!--
    ExpiresIn, in milliseconds. The ref is optional. The explicitly specified
    value is the default, when the variable reference cannot be resolved.
      2400000 = 40 minutes
      3600000 = 60 minutes
    -->
    <ExpiresIn ref='flow.variable'>2400000</ExpiresIn>

    <!--
    RefreshTokenExpiresIn, in milliseconds. Optional; if it is not
    specified, the default value will be used which is -1 (no expiration).
      691200000 = 8 days
      2592000000 = 30 days
    -->
    <RefreshTokenExpiresIn>691200000</RefreshTokenExpiresIn>

    <SupportedGrantTypes>
        <!-- keep one or more of the following -->
        <GrantType>authorization_code</GrantType>
        <GrantType>password</GrantType>
        <GrantType>client_credentials</GrantType>
    </SupportedGrantTypes>

    <!-- variable that specifies the requested grant type -->
    <GrantType>${2:$$(yas-choose-value '(\"request.queryparam.grant_type\" \"request.formparam.grant_type\" \"flowVariable.something\" ))}</GrantType>

    <!--
    ExternalAuthorization is used to support external authorization. It is
    optional; if not present, the implied value is false. If it is present and
    true:
        - this policy looks for a flow variable with the fixed name
          'oauth_external_authorization_status', which indicates the
          external authorization status.

        - if 'oauth_external_authorization_status' is true, the policy does
          not explicitly validate the client_id and client_secret.
          Still, the client_id is expected to be present in the request.

        - if 'oauth_external_authorization_status' is false, this signals
          that external authorization has failed and the policy throws
          an appropriate fault.

    If ExternalAuthorization is set to false or if the element is not present, then
    the policy validates the client_id and secret against the internal key store.
    -->

    <ExternalAuthorization>${3:$$(yas-choose-value '(\"true\" \"false\" ))}</ExternalAuthorization>

    <!--
    Optional: these attributes get associated to the token.
    They will be available to the api proxy whenever the token is
    subsequently validated.
    -->
    <Attributes>
      <Attribute name='attr_name1' ref='flow.variable1' display='true|false'>value1</Attribute>
      <Attribute name='attr_name2' ref='flow.variable2' display='true|false'>value2</Attribute>
    </Attributes>

    <GenerateResponse enabled='true'/>
    <!--

    If you include GenerateResponse and have enabled='true', then
    the response is sent directly to the caller. The payload looks like
    this:

    {
     \"issued_at\": \"1420262924658\",
     \"scope\": \"READ\",
     \"application_name\": \"ce1e94a2-9c3e-42fa-a2c6-1ee01815476b\",
     \"refresh_token_issued_at\": \"1420262924658\",
     \"status\": \"approved\",
     \"refresh_token_status\": \"approved\",
     \"api_product_list\": \"[PremiumWeatherAPI]\",
     \"expires_in\": \"1799\",
     \"developer.email\": \"tesla@weathersample.com\",
     \"organization_id\": \"0\",
     \"token_type\": \"BearerToken\",
     \"refresh_token\": \"fYACGW7OCPtCNDEnRSnqFlEgogboFPMm\",
     \"client_id\": \"5jUAdGv9pBouF0wOH5keAVI35GBtx3dT\",
     \"access_token\": \"2l4IQtZXbn5WBJdL6EF7uenOWRsi\",
     \"organization_name\": \"docs\",
     \"refresh_token_expires_in\": \"0\",
     \"refresh_count\": \"0\"
    }

    If you omit GenerateResponse or have enabled='false', then
    these flow variables are set on success:

      oauthv2accesstoken.##.access_token
      oauthv2accesstoken.##.token_type
      oauthv2accesstoken.##.expires_in
      oauthv2accesstoken.##.refresh_token
      oauthv2accesstoken.##.refresh_token_expires_in
      oauthv2accesstoken.##.refresh_token_issued_at
      oauthv2accesstoken.##.refresh_token_status
    -->

  <RFCCompliantRequestResponse>true</RFCCompliantRequestResponse>
</OAuthV2>
